import asyncio
import logging
from datetime import timedelta
import pytz  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from telethon import TelegramClient, events
import config

API_ID = config.api_id
API_HASH = config.api_hash
BOT_TOKEN = config.bot_token
ADMIN_USERNAMES = config.admin_usernames # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ config

notify_user_username = config.user_to_notify_username
channels_to_track = config.channels_to_track[:]
notification_text = config.notification_text

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
telethon_client = TelegramClient('anon', API_ID, API_HASH)
msk_timezone = pytz.timezone('Europe/Moscow') # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã

class SettingsForm(StatesGroup):
    notify_user = State()

class SettingsMenuCallback(types.InlineCallbackData, prefix="settings_menu"):
    action: str

settings_menu_callback = SettingsMenuCallback.as_markup()

def create_settings_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=SettingsMenuCallback(action="notify_user"))
    builder.button(text="–ö–∞–Ω–∞–ª—ã (—Å–∫–æ—Ä–æ)", callback_data=SettingsMenuCallback(action="channels"))
    builder.button(text="–¢–µ–∫—Å—Ç (—Å–∫–æ—Ä–æ)", callback_data=SettingsMenuCallback(action="notification_text"))
    builder.adjust(1)
    return builder.as_markup()

def is_admin(username: str) -> bool:
    return username in ADMIN_USERNAMES

@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    user_username = message.from_user.username
    if not user_username or not is_admin(user_username):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

@dp.message(commands=["settings"])
async def command_settings_handler(message: types.Message) -> None:
    user_username = message.from_user.username
    if not user_username or not is_admin(user_username):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    keyboard = create_settings_keyboard()
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=keyboard)

@dp.callback_query(SettingsMenuCallback.filter(F.action == "notify_user"))
async def settings_notify_user_callback_handler(query: types.CallbackQuery, state: FSMContext) -> None:
    user_username = query.from_user.username
    if not user_username or not is_admin(user_username):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True) # Alert –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        return
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    await state.set_state(SettingsForm.notify_user)
    await query.answer()

@dp.message(StateFilter(SettingsForm.notify_user))
async def process_notify_user_input(message: types.Message, state: FSMContext) -> None:
    user_username = message.from_user.username
    if not user_username or not is_admin(user_username):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        await state.clear() # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return
    global notify_user_username
    username = message.text.strip()
    if username.startswith('@'):
        notify_user_username = username
        await state.clear()
        keyboard = create_settings_keyboard()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {notify_user_username}", reply_markup=keyboard)
        await message.delete()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å '@'. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.callback_query(SettingsMenuCallback.filter(F.action == "channels"))
async def settings_channels_callback_handler(query: types.CallbackQuery) -> None:
    user_username = query.from_user.username
    if not user_username or not is_admin(user_username):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    await query.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await query.message.edit_text("–ö–∞–Ω–∞–ª—ã (—Å–∫–æ—Ä–æ):", reply_markup=create_settings_keyboard())

@dp.callback_query(SettingsMenuCallback.filter(F.action == "notification_text"))
async def settings_notification_text_callback_handler(query: types.CallbackQuery) -> None:
    user_username = query.from_user.username
    if not user_username or not is_admin(user_username):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    await query.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await query.message.edit_text("–¢–µ–∫—Å—Ç (—Å–∫–æ—Ä–æ):", reply_markup=create_settings_keyboard())

@telethon_client.on(events.NewMessage(chats=channels_to_track))
async def telethon_new_message_handler(event):
    channel = await event.get_chat()
    channel_username = channel.username if channel.username else channel.title
    post_link = f"https://t.me/{channel_username}/{event.message.id}"
    post_time_utc = event.message.date
    post_time_msk = post_time_utc.astimezone(msk_timezone) # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ú–°–ö —Å pytz
    post_time_formatted = post_time_msk.strftime("%d.%m.%Y %H:%M:%S")

    formatted_notification_text = f"""
    *--------------------*
    üì¢  {channel.title}
    ‚è±Ô∏è  {post_time_formatted} (–ú–°–ö)
    *--------------------*
    {post_link}
    *--------------------*
    """
    try:
        await telethon_client.send_message(notify_user_username, formatted_notification_text, parse_mode='markdown') # Markdown –¥–ª—è –æ–±–≤–æ–¥–∫–∏
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ {channel.title} -> {notify_user_username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Telethon –∫–ª–∏–µ–Ω—Ç–∞")
    await asyncio.gather(
        dp.start_polling(bot),
        telethon_client.start(bot_token=BOT_TOKEN),
        telethon_client.run_until_disconnected()
    )

if __name__ == "__main__":
    asyncio.run(main())
